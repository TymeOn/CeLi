# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.8
#
# <auto-generated>
#
# Generated from file `MusicPlayer.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SOAP
_M_SOAP = Ice.openModule('SOAP')
__name__ = 'SOAP'

if '_t_list' not in _M_SOAP.__dict__:
    _M_SOAP._t_list = IcePy.defineSequence('::SOAP::list', (), IcePy._t_string)

if '_t_seq' not in _M_SOAP.__dict__:
    _M_SOAP._t_seq = IcePy.defineSequence('::SOAP::seq', (), IcePy._t_byte)

_M_SOAP._t_MusicPlayer = IcePy.defineValue('::SOAP::MusicPlayer', Ice.Value, -1, (), False, True, None, ())

if 'MusicPlayerPrx' not in _M_SOAP.__dict__:
    _M_SOAP.MusicPlayerPrx = Ice.createTempClass()
    class MusicPlayerPrx(Ice.ObjectPrx):

        def renameMusic(self, filename, newFilename, context=None):
            return _M_SOAP.MusicPlayer._op_renameMusic.invoke(self, ((filename, newFilename), context))

        def renameMusicAsync(self, filename, newFilename, context=None):
            return _M_SOAP.MusicPlayer._op_renameMusic.invokeAsync(self, ((filename, newFilename), context))

        def begin_renameMusic(self, filename, newFilename, _response=None, _ex=None, _sent=None, context=None):
            return _M_SOAP.MusicPlayer._op_renameMusic.begin(self, ((filename, newFilename), _response, _ex, _sent, context))

        def end_renameMusic(self, _r):
            return _M_SOAP.MusicPlayer._op_renameMusic.end(self, _r)

        def deleteMusic(self, filename, context=None):
            return _M_SOAP.MusicPlayer._op_deleteMusic.invoke(self, ((filename, ), context))

        def deleteMusicAsync(self, filename, context=None):
            return _M_SOAP.MusicPlayer._op_deleteMusic.invokeAsync(self, ((filename, ), context))

        def begin_deleteMusic(self, filename, _response=None, _ex=None, _sent=None, context=None):
            return _M_SOAP.MusicPlayer._op_deleteMusic.begin(self, ((filename, ), _response, _ex, _sent, context))

        def end_deleteMusic(self, _r):
            return _M_SOAP.MusicPlayer._op_deleteMusic.end(self, _r)

        def searchMusic(self, filename, context=None):
            return _M_SOAP.MusicPlayer._op_searchMusic.invoke(self, ((filename, ), context))

        def searchMusicAsync(self, filename, context=None):
            return _M_SOAP.MusicPlayer._op_searchMusic.invokeAsync(self, ((filename, ), context))

        def begin_searchMusic(self, filename, _response=None, _ex=None, _sent=None, context=None):
            return _M_SOAP.MusicPlayer._op_searchMusic.begin(self, ((filename, ), _response, _ex, _sent, context))

        def end_searchMusic(self, _r):
            return _M_SOAP.MusicPlayer._op_searchMusic.end(self, _r)

        def playMusic(self, filename, context=None):
            return _M_SOAP.MusicPlayer._op_playMusic.invoke(self, ((filename, ), context))

        def playMusicAsync(self, filename, context=None):
            return _M_SOAP.MusicPlayer._op_playMusic.invokeAsync(self, ((filename, ), context))

        def begin_playMusic(self, filename, _response=None, _ex=None, _sent=None, context=None):
            return _M_SOAP.MusicPlayer._op_playMusic.begin(self, ((filename, ), _response, _ex, _sent, context))

        def end_playMusic(self, _r):
            return _M_SOAP.MusicPlayer._op_playMusic.end(self, _r)

        def stopMusic(self, context=None):
            return _M_SOAP.MusicPlayer._op_stopMusic.invoke(self, ((), context))

        def stopMusicAsync(self, context=None):
            return _M_SOAP.MusicPlayer._op_stopMusic.invokeAsync(self, ((), context))

        def begin_stopMusic(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SOAP.MusicPlayer._op_stopMusic.begin(self, ((), _response, _ex, _sent, context))

        def end_stopMusic(self, _r):
            return _M_SOAP.MusicPlayer._op_stopMusic.end(self, _r)

        def uploadPartition(self, number, partition, context=None):
            return _M_SOAP.MusicPlayer._op_uploadPartition.invoke(self, ((number, partition), context))

        def uploadPartitionAsync(self, number, partition, context=None):
            return _M_SOAP.MusicPlayer._op_uploadPartition.invokeAsync(self, ((number, partition), context))

        def begin_uploadPartition(self, number, partition, _response=None, _ex=None, _sent=None, context=None):
            return _M_SOAP.MusicPlayer._op_uploadPartition.begin(self, ((number, partition), _response, _ex, _sent, context))

        def end_uploadPartition(self, _r):
            return _M_SOAP.MusicPlayer._op_uploadPartition.end(self, _r)

        def uploadMusic(self, number, filename, context=None):
            return _M_SOAP.MusicPlayer._op_uploadMusic.invoke(self, ((number, filename), context))

        def uploadMusicAsync(self, number, filename, context=None):
            return _M_SOAP.MusicPlayer._op_uploadMusic.invokeAsync(self, ((number, filename), context))

        def begin_uploadMusic(self, number, filename, _response=None, _ex=None, _sent=None, context=None):
            return _M_SOAP.MusicPlayer._op_uploadMusic.begin(self, ((number, filename), _response, _ex, _sent, context))

        def end_uploadMusic(self, _r):
            return _M_SOAP.MusicPlayer._op_uploadMusic.end(self, _r)

        def getNumber(self, context=None):
            return _M_SOAP.MusicPlayer._op_getNumber.invoke(self, ((), context))

        def getNumberAsync(self, context=None):
            return _M_SOAP.MusicPlayer._op_getNumber.invokeAsync(self, ((), context))

        def begin_getNumber(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SOAP.MusicPlayer._op_getNumber.begin(self, ((), _response, _ex, _sent, context))

        def end_getNumber(self, _r):
            return _M_SOAP.MusicPlayer._op_getNumber.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SOAP.MusicPlayerPrx.ice_checkedCast(proxy, '::SOAP::MusicPlayer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SOAP.MusicPlayerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SOAP::MusicPlayer'
    _M_SOAP._t_MusicPlayerPrx = IcePy.defineProxy('::SOAP::MusicPlayer', MusicPlayerPrx)

    _M_SOAP.MusicPlayerPrx = MusicPlayerPrx
    del MusicPlayerPrx

    _M_SOAP.MusicPlayer = Ice.createTempClass()
    class MusicPlayer(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SOAP::MusicPlayer')

        def ice_id(self, current=None):
            return '::SOAP::MusicPlayer'

        @staticmethod
        def ice_staticId():
            return '::SOAP::MusicPlayer'

        def renameMusic(self, filename, newFilename, current=None):
            raise NotImplementedError("servant method 'renameMusic' not implemented")

        def deleteMusic(self, filename, current=None):
            raise NotImplementedError("servant method 'deleteMusic' not implemented")

        def searchMusic(self, filename, current=None):
            raise NotImplementedError("servant method 'searchMusic' not implemented")

        def playMusic(self, filename, current=None):
            raise NotImplementedError("servant method 'playMusic' not implemented")

        def stopMusic(self, current=None):
            raise NotImplementedError("servant method 'stopMusic' not implemented")

        def uploadPartition(self, number, partition, current=None):
            raise NotImplementedError("servant method 'uploadPartition' not implemented")

        def uploadMusic(self, number, filename, current=None):
            raise NotImplementedError("servant method 'uploadMusic' not implemented")

        def getNumber(self, current=None):
            raise NotImplementedError("servant method 'getNumber' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SOAP._t_MusicPlayerDisp)

        __repr__ = __str__

    _M_SOAP._t_MusicPlayerDisp = IcePy.defineClass('::SOAP::MusicPlayer', MusicPlayer, (), None, ())
    MusicPlayer._ice_type = _M_SOAP._t_MusicPlayerDisp

    MusicPlayer._op_renameMusic = IcePy.Operation('renameMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    MusicPlayer._op_deleteMusic = IcePy.Operation('deleteMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    MusicPlayer._op_searchMusic = IcePy.Operation('searchMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_SOAP._t_list, False, 0), ())
    MusicPlayer._op_playMusic = IcePy.Operation('playMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    MusicPlayer._op_stopMusic = IcePy.Operation('stopMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    MusicPlayer._op_uploadPartition = IcePy.Operation('uploadPartition', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_SOAP._t_seq, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    MusicPlayer._op_uploadMusic = IcePy.Operation('uploadMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    MusicPlayer._op_getNumber = IcePy.Operation('getNumber', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_SOAP.MusicPlayer = MusicPlayer
    del MusicPlayer

# End of module SOAP
